import logging
import asyncio  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from datetime import time
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    ConversationHandler,
    filters
)
from apscheduler.schedulers.background import BackgroundScheduler

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

SCOPE = ['https://www.googleapis.com/auth/spreadsheets',
         'https://www.googleapis.com/auth/drive']
CREDS = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', SCOPE)
CLIENT = gspread.authorize(CREDS)
SHEET_ID = ''

DESCRIPTION, STATE, CATEGORY, URGENCY, TIME_SPENT, COMPLEXITY = range(6)

STATES = ['–†–∞—Å–ø–∏—Å–∞—Ç—å', '–ñ–¥—ë—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω']
CATEGORIES = [
    '–•–æ–±–±–∏', '–ü—Ä–∏–≤—ã—á–∫–∏', '–ù–∞–≤—ã–∫–∏', '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ',
    '–í—Ä–µ–º—è –∏ –≤–Ω–∏–º–∞–Ω–∏–µ', '–°—Ç—Ä–∞—Ö–∏ –∏ –≤–æ–ª–Ω–µ–Ω–∏—è', '–¶–µ–ª—å',
    '–ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å', '–º–µ—Ç–∞', '–°–ª–µ–ø—ã–µ –∑–æ–Ω—ã'
]
RATINGS = [str(i) for i in range(1, 11)]

def create_keyboard(items, columns=2):
    keyboard = [items[i:i+columns] for i in range(0, len(items), columns)]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç {update.effective_user.first_name}! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–∞–≥–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /addbug —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±–∞–≥",
        reply_markup=create_keyboard(['–î–æ–±–∞–≤–∏—Ç—å –±–∞–≥'])
    )

async def addbug(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "–û–ø–∏—à–∏ –±–∞–≥:", 
        reply_markup=ReplyKeyboardRemove()
    )
    return DESCRIPTION

async def handle_description(update: Update, context: CallbackContext) -> int:
    context.user_data['bug'] = {'description': update.message.text}
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:", 
        reply_markup=create_keyboard(STATES)
    )
    return STATE

async def handle_state(update: Update, context: CallbackContext) -> int:
    context.user_data['bug']['state'] = update.message.text
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 
        reply_markup=create_keyboard(CATEGORIES, 3)
    )
    return CATEGORY

async def handle_category(update: Update, context: CallbackContext) -> int:
    context.user_data['bug']['category'] = update.message.text
    await update.message.reply_text(
        "–û—Ü–µ–Ω–∏ —Å—Ä–æ—á–Ω–æ—Å—Ç—å (1-10):", 
        reply_markup=create_keyboard(RATINGS, 5)
    )
    return URGENCY

async def handle_urgency(update: Update, context: CallbackContext) -> int:
    context.user_data['bug']['urgency'] = int(update.message.text)
    await update.message.reply_text(
        "–û—Ü–µ–Ω–∏ –∑–∞—Ç—Ä–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ (1-10):", 
        reply_markup=create_keyboard(RATINGS, 5)
    )
    return TIME_SPENT

async def handle_time_spent(update: Update, context: CallbackContext) -> int:
    context.user_data['bug']['time_spent'] = int(update.message.text)
    await update.message.reply_text(
        "–û—Ü–µ–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å (1-10):", 
        reply_markup=create_keyboard(RATINGS, 5)
    )
    return COMPLEXITY

async def handle_complexity(update: Update, context: CallbackContext) -> int:
    context.user_data['bug']['complexity'] = int(update.message.text)
    
    try:
        sheet = CLIENT.open_by_key(SHEET_ID).sheet1
        row = [
            context.user_data['bug']['description'],
            context.user_data['bug']['state'],
            context.user_data['bug']['category'],
            context.user_data['bug']['urgency'],
            context.user_data['bug']['time_spent'],
            context.user_data['bug']['complexity'],
        ]
        print(row, 'rowrowrow')
        sheet.append_row(row)
        await update.message.reply_text(
            "‚úÖ –ë–∞–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", 
            reply_markup=create_keyboard(['–î–æ–±–∞–≤–∏—Ç—å –±–∞–≥'])
        )
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–≥–∞", 
            reply_markup=create_keyboard(['–î–æ–±–∞–≤–∏—Ç—å –±–∞–≥'])
        )
    
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', 
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END

async def daily_reminder(context: CallbackContext):
    try:
        await context.bot.send_message(
            chat_id=,
            text="üïö 23:30! –ù–µ –∑–∞–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –±–∞–≥–∏! /addbug"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

def send_reminder(context: CallbackContext):
    loop = asyncio.new_event_loop()  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    asyncio.set_event_loop(loop)     # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
    loop.run_until_complete(daily_reminder(context))  # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    loop.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è



async def handle_button_add_bug(update: Update, context: CallbackContext) -> int:
    return await addbug(update, context)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–∞

def main() -> None:
    application = ApplicationBuilder().token("").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('addbug', addbug),
                      MessageHandler(filters.Regex('–î–æ–±–∞–≤–∏—Ç—å –±–∞–≥'), addbug)],
        states={
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_description)],
            STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_state)],
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_category)],
            URGENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_urgency)],
            TIME_SPENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_time_spent)],
            COMPLEXITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_complexity)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)

    scheduler = BackgroundScheduler(timezone="Europe/Moscow")
    scheduler.add_job(
        send_reminder,  # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        trigger='cron',
        hour=23,
        minute=30,
        kwargs={'context': application}  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    )
    scheduler.start()
    application.run_polling()

    
if __name__ == '__main__':
    main()
